webpackHotUpdate("static\\development\\pages\\docs.js",{

/***/ "./lib/Pages.js":
/*!**********************!*\
  !*** ./lib/Pages.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Page */ "./lib/Page.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
// Generated by Page Builder


/* harmony default export */ __webpack_exports__["default"] = ({
  $pages: function $pages() {
    return Object.values(this).filter(function (page) {
      return page instanceof _Page__WEBPACK_IMPORTED_MODULE_0__["default"];
    });
  },
  $blogs: function $blogs() {
    return this.$pages().filter(function (page) {
      return page.blog;
    }).sort(_Page__WEBPACK_IMPORTED_MODULE_0__["default"].compareDates);
  },
  $search: function $search(searchText) {
    var regex = new RegExp(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.escapeRegExp(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.escape(searchText)), 'i');
    var results = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.$pages()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var page = _step.value;

        if (page.$searchRegex(regex)) {
          results.push(page);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return results;
  },
  'about': new _Page__WEBPACK_IMPORTED_MODULE_0__["default"]({
    name: 'about',
    content: "# Meet Our Team\r\n\r\nWe are a group of Software and Electrical Engineering students from the University of Victoria. We combined our passions for programming, artificial intelligence, and gaming to deliver an artificial intelligence tool to help newcomers discover a love for technology and creating something new.\r\n\r\nEric is a fourth-year Software Engineering student graduating in August 2019. He is a Canadian through-and-through having already lived and worked in 5 Canadian provinces. His love for creative projects and problem-solving led him to his studies at UVic. Eric brings his passion for code and design to all his projects both in and out of school.\r\n\r\nTorrey plans to graduate from UVic with a Bachelor of Software Engineering in 2019. Come October, she will be starting her career as a Firmware Developer at Reliable Controls in the beautiful city of Victoria. She hopes to one day follow her dream of working for NASA.\r\n\r\nJon is a fourth year Software Engineering student aiming to graduate in 2020. He hails from Prince George BC, and moved to Victoria to study general engineering at UVic in 2014. Jon spends his time writing Dungeons and Dragons campaigns and working on his personal coding projects. After graduation he hopes to remain in Victoria.\r\n\r\nJames is graduating from UVic with a Software Engineering degree and Business minor in August 2019. He wants to try his hand at running a business someday, but until then he hopes to work on technologies that help people. Further education is still a possibility for the future, but right now he is excited to start his career.\r\n\r\nAndrew is a fourth year Software Engineering student who plans on graduating in April 2020. He started his University career in the Faculty of Science, but transitioned into Software Engineering after discovering a fondness for programming. After graduation he plans on moving to Vancouver to pursue a career as a developer.\r\n\r\nForrest is a fourth year Bachelor of Electrical Engineering student with a Minor in Computer Science. He has experience working both high level technologies such as web development and low level technologies such as integrated circuit design as well as software designed to target embedded systems. As for computer support, he has worked as an IT profession for both desktop and remote system administration. Personally, he loves a good sci-fi book and has been playing guitar since he was 17.\r\n\r\n# Acknowledgements\r\nChip-Gr8 would not have been possible without the help of several individuals. We would like to acknowledge their involvement in Chip-Gr8's development journey, and extend to them our deepest thanks.\r\n\r\n## Faculty Supervisor\r\nWe chose Rich Little as our faculty supervisor for his background in algorithms and based on our positive experiences with him in CSC 225 and 226 courses. He was responsible for supervising the project during its development cycle and for marking all of the milestones. Thank you to Rich Little for the help he provided along the way.\r\n\r\n## Supporters\r\n\r\n#### Dr. Xiaodai Dong\r\nThank you to Dr. Xiaodai Dong for being the primary instructor this semester.\r\n\r\n#### Dr. T. Ilamparithi\r\nThank you to Dr. Ilamparithi for being the course coordinator this semester.\r\n\r\n#### Sai Prakash Reddy Konda\r\nThank you to the TA for their help with the course.\r\n",
    plainTxt: 'Meet Our Team\nWe are a group of Software and Electrical Engineering students from the University of Victoria. We combined our passions for programming, artificial intelligence, and gaming to deliver an artificial intelligence tool to help newcomers discover a love for technology and creating something new.\nEric is a fourth-year Software Engineering student graduating in August 2019. He is a Canadian through-and-through having already lived and worked in 5 Canadian provinces. His love for creative projects and problem-solving led him to his studies at UVic. Eric brings his passion for code and design to all his projects both in and out of school.\nTorrey plans to graduate from UVic with a Bachelor of Software Engineering in 2019. Come October, she will be starting her career as a Firmware Developer at Reliable Controls in the beautiful city of Victoria. She hopes to one day follow her dream of working for NASA.\nJon is a fourth year Software Engineering student aiming to graduate in 2020. He hails from Prince George BC, and moved to Victoria to study general engineering at UVic in 2014. Jon spends his time writing Dungeons and Dragons campaigns and working on his personal coding projects. After graduation he hopes to remain in Victoria.\nJames is graduating from UVic with a Software Engineering degree and Business minor in August 2019. He wants to try his hand at running a business someday, but until then he hopes to work on technologies that help people. Further education is still a possibility for the future, but right now he is excited to start his career.\nAndrew is a fourth year Software Engineering student who plans on graduating in April 2020. He started his University career in the Faculty of Science, but transitioned into Software Engineering after discovering a fondness for programming. After graduation he plans on moving to Vancouver to pursue a career as a developer.\nForrest is a fourth year Bachelor of Electrical Engineering student with a Minor in Computer Science. He has experience working both high level technologies such as web development and low level technologies such as integrated circuit design as well as software designed to target embedded systems. As for computer support, he has worked as an IT profession for both desktop and remote system administration. Personally, he loves a good sci-fi book and has been playing guitar since he was 17.\nAcknowledgements\nChip-Gr8 would not have been possible without the help of several individuals. We would like to acknowledge their involvement in Chip-Gr8&#39;s development journey, and extend to them our deepest thanks.\nFaculty Supervisor\nWe chose Rich Little as our faculty supervisor for his background in algorithms and based on our positive experiences with him in CSC 225 and 226 courses. He was responsible for supervising the project during its development cycle and for marking all of the milestones. Thank you to Rich Little for the help he provided along the way.\nSupporters\nDr. Xiaodai Dong\nThank you to Dr. Xiaodai Dong for being the primary instructor this semester.\nDr. T. Ilamparithi\nThank you to Dr. Ilamparithi for being the course coordinator this semester.\nSai Prakash Reddy Konda\nThank you to the TA for their help with the course.\n',
    route: '/about',
    layout: '../layouts/About',
    title: 'chip-gr8 | About',
    place: 'about'
  }),
  'docs': new _Page__WEBPACK_IMPORTED_MODULE_0__["default"]({
    name: 'docs',
    content: "# Overview\r\n\r\nChip-Gr8 is distributed through [pip](https://pypi.org/project/pip/)! To install run\r\n\r\n```readonly-nolines\r\npip install chipgr8\r\n```\r\n\r\nCurrently Chip-Gr8 only supports python 3.6 and 3.7. We provide binaries for Chip-Gr8's backend for Windows users with the following configurations: Python36 (32 and 64 bit) and Python37 (32 and 64 bit). For Mac and Linux users `pip install` should build the backend binaries using your system's compiler.\r\n\r\nFor additional documentation see the [Chip-Gr8 Reference Manual](../static/Chip-Gr8-Reference-Manual.pdf).\r\n\r\n# Writing Your First Agent\r\n\r\nThis example will help you write your first AI agent. An AI agent performs two key tasks, observations and actions. To get started import the Chip-Gr8 API, and a game object. The game objects provide useful defaults for observations, actions, as well as the correct ROM name. For this example we will use the game Squash. Squash is a single player Pong. We will also import random for later.\r\n\r\n```lang:python-readonly\r\nimport random\r\nimport chipgr8\r\nfrom chipgr8.games import Squash\r\n```\r\n\r\nAI agents are trained and run in loops. This is typically done with a while loop where you wait for a CHIP-8 VM instance to be done. For our first agent let's just pick a random action. In order to run this agent we will need to create a VM instance to run it on and load the Squash ROM.\r\n\r\n```lang:python-readonly\r\nvm = chipgr8.init(ROM=Squash.ROM)\r\n```\r\n\r\nBy default the API returns a VM appropriate for running a single AI. We will now create a loop where we repeatedly choose a random action. `Squash.actions` provides a list of all the valid Squash game actions. We also need to indicate when the VM instance should be considered done. The Squash object also provides this in its set of observations, so we will observe the VM and check to see if the VM is done.\r\n\r\n```lang:python-readonly\r\nwhile not vm.done():\r\n    vm.act(random.choice(Squash.actions))\r\n    observations = Squash.observe(vm)\r\n    vm.doneIf(observations.done)\r\n```\r\n\r\nOur AI will now run, but we will not be able to see it perform any of its actions. We can watch a replay using the `.inputHistory` of our VM. The `.go()` method will loop the VM instance for us.\r\n\r\n```lang:python-readonly\r\nvms = chipgr8.init(ROM=Squash.ROM, instances=100)\r\n```\r\n\r\nWe can now iterate over the vms and run each one like we did before.\r\n\r\n```lang:python-readonly\r\nchipgr8.init(\r\n    ROM=Squash.ROM,\r\n    inputHistory=vm.inputHistory,\r\n    display=True\r\n).go()\r\n```\r\n\r\nOur AI is not very good, but we can easily make it better just by running multiple random AI agents and picking the best one. Let’s start by creating 100 VM instances.\r\n\r\n```lang:python-readonly\r\nwhile not vms.done():\r\n    for vm in vms:\r\n        vm.act(random.choice(Squash.actions))\r\n        observations = Squash.observe(vm)\r\n        vm.doneIf(observations.done)\r\n```\r\n\r\nThis approach is a little slow though since we have to run every VM instance as part of the same process. We can take advantage of a machine's multiple cores by using the VMs `.inParallel()` method. This method requires us to refactor our code a little bit. This method expects a function which will be called repeatedly until the vm instance is done. We can do this by taking our inner section of the loop and turning it into a function.\r\n\r\n```lang:python-readonly\r\ndef action(vm):\r\n    vm.act(random.choice(Squash.actions))\r\n    observations = Squash.observe(vm)\r\n    vm.doneIf(observations.done)\r\n\r\nvms.inParallel(action)\r\n```\r\n\r\nWe can now just pick the best vm of the bunch. The Squash object thankfully has another observation that can help us: score. We can use the VMs `.maxBy()` function to get the best VM.\r\n\r\n```lang:python-readonly\r\nbest = vms.maxBy(lambda vm : Squash.observe(vm).score)\r\n```\r\n\r\nWe can now watch this VM like we did before using its `inputHistory`. Congratulations on writing your first Chip-Gr8 AI agent! You can find the final code altogether below.\r\n\r\n```lang:python-readonly\r\nimport random\r\nimport chipgr8\r\nfrom chipgr8.games import Squash\r\n\r\n# This action is performed repeatedly until the VM is done\r\ndef action(vm):\r\n    vm.act(random.choice(Squash.actions))\r\n    observations = Squash.observe(vm)\r\n    vm.doneIf(observations.done)\r\n\r\n# Create 100 CHIP-8 VM instances\r\nvms = chipgr8.init(ROM=Squash.ROM, instances=100)\r\n# Run all our random agents\r\nvms.inParallel(action)\r\n# Pick the best one\r\nbest = vms.maxBy(lambda vm : Squash.observe(vm).score)\r\n\r\n# Show a replay of the best\r\nchipgr8.init(\r\n    ROM=Squash.ROM,\r\n    inputHistory=best.inputHistory,\r\n    display=True\r\n).go()\r\n```\r\n\r\n# Querying Memory\r\n\r\nIn order to support more games, or find additional values from CHIP-8 RAM for games already included with Chip-Gr8, components are provided for querying memory. These components are meant to be used in a workflow like the following:\r\n\r\n 1. Start the Chip-Gr8 display with the ROM you want to query.\r\n 2. Put the VM into a state you understand.\r\n 3. Create a `Query` object and use a predicate to limit the number of matching memory addresses.\r\n 4. Change the VM to a new state and use a new predicate to further filter the results.\r\n 5. Repeat step 4 until there is only a single address that matches.\r\n 6. Copy the `Query` out to a file.\r\n\r\nSeveral steps are made easier by the fact that `Query` and `Observer` objects will print their own source code in the REPL. You can easily write these to a file using the write function.\r\n\r\n## Queries\r\n\r\nQueries provide several predicates to limit matched memory addresses, like `.eq()`, `.dec()`, `.lte()`, etc. A list of all memory addresses, along with their previously queried values can be found using the `.previous` field. For example:\r\n\r\n```lang:python-readonly\r\nq = Query(vm)\r\nq.eq(0x04)\r\nprint(q.previous)\r\n```\r\n\r\nYou can instantiate a finished `Query` by providing an address instead of a VM instance. For example, to create a query that looks at address 0x200:\r\n\r\n```lang:python-readonly\r\nq = Query(0x200)\r\n```\r\n\r\nThis `Query` can now be used to retrieve the value in CHIP-8 RAM at 0x200 of any VM instance with:\r\n\r\n```lang:python-readonly\r\nq.observe(vm)\r\n```\r\n\r\n## Observers\r\n\r\nQueries can be combined using an `Observer`. An `Observer` is just a collection of queries and functions that provides one method, observe, which applies all these queries and functions to a provided VM instance and returns the result as a `NamedList`. A `NamedList` is a data structure that behaves like a Python list, but can be accessed by attributes and keys. For example, to create a list of one element, y, with a key, `key`\r\n\r\n```lang:python-readonly\r\nmyNamedList = NamedList(['key'], [7])\r\n\r\n# To access the element you can use the following ways:\r\nmyNameList[0]     # By index\r\nmyNameList.key    # By attribute\r\nmyNameList['key'] # By key\r\n```\r\n\r\nTo add queries to an `Observer` you can call `.addQuery()`. This method also accepts as the query a function that takes two arguments. The first argument is a collection of all non-function observations. The second is the VM instance. This allows you to create combinational queries. For example\r\n\r\n```lang:python-readonly\r\no = Observer()\r\no.addQuery('lives', Query(0x115))\r\no.addQuery('done',  lambda o, vm : o.lives == 0)\r\n```\r\n\r\n## Games\r\nGames provide actions, observations, and a ROM all in one package. Several games are provided out of the box, but you can also create your own game objects for ROMs not included with Chip-Gr8.\r\n\r\n# API Reference\r\n\r\n## Constants\r\n\r\n### `defaultBindings`\r\n\r\nDefault key bindings for the Chip-Gr8 display as a Python dictionary.\r\n\r\n### `themes`\r\n\r\nA Python dictionary of the builtin Chip-Gr8 themes.\r\n\r\n## Functions\r\n\r\n### `assemble(source=None, inPath=None, outPath=None)`\r\nConverts assembly `source` code, or source code contained in `inPath` into binary data (a ROM). This ROM may optionally be written to file with the `outPath` argument.\r\n\r\n### `disassemble((Parameters))`\r\nConverts a binary ROM into an assembly source file. Returns the source. Provides option for disassembling with labels and special format.\r\n\r\n##### Parameters\r\n\r\n##### `buffer=None`\r\nThe binary ROM to disassemble as a set of bytes. Optional if `inPath` is provided.\r\n\r\n##### `inPath=None`\r\nThe path to a binary ROM to disassemble. Optional if `buffer` is provided.\r\n\r\n##### `outPath=None`\r\nIf the path is provided, the source code is written to that file.\r\n\r\n##### `labels={}`\r\nA dictionary used to generate labels. If None is passed, labels will not be generated in the source.\r\n\r\n##### `decargs=True`\r\nIf True, instruction numerical operands will be output in decimal rather than hexadecimal.\r\n\r\n##### `srcFormat='{label}{labelSep}{prefix}{instruction}\\n'`\r\nA format string for lines of source code. Can contain the following variables `label`, `labelSep`, `prefix`, `instruction`, `addr`, and `dump`. For example for hexdump with address use:\r\n\r\n```lang:python-readonly\r\nsrcFormat='{addr} {dump}'\r\n```\r\n\r\n##### `labelSep = '\\n  '`\r\nThe string used to separate labels from instructions.\r\n\r\n##### `prefix=' '`\r\nThe string used to prefix all instructions.\r\n\r\n##### `addrTable={}`\r\nA table that will have addresses as keys and instructions as values.\r\n\r\n##### `findROM(rom)`\r\nReturns the path to `rom` if it is one of the included ROMs.\r\n\r\n##### `hexdump(buffer=None, inPath=None, outPath=None)`\r\nDumps a `buffer` or file at `inPath` as a set of 16-bit hexadecimal values on each line (the number of bits that correspond to a CHIP-8 instruction). Writes the data to `outPath` if provided.\r\n\r\n### `init((Parameters))`\r\nReturns an instance of `Chip8VM` or `Chip8VMs`. Used to configure the virtual machines for a user or a given AI agent.\r\n\r\n#### Parameters\r\n\r\n##### `ROM=None`\r\nIf provided will load a ROM into the VM instance or instances.\r\n\r\n##### `frequency=600`\r\nThe starting `frequency` of the VM instance or instances. Will automatically be set to the closest multiple of 60 less than or equal to the provided `frequency`.\r\n\r\n##### `loadState=None`\r\nA path or tag to a VM save state that will be loaded into each VM instance or instances.\r\n\r\n##### `inputHistory=None`\r\nIf provided user and AI input will be ignored and the history will be used to reproduce the same events.\r\n\r\n##### `sampleRate=1`\r\nThe number of steps that are performed when an AI calls `act`.\r\n\r\n##### `instances=1`\r\nThe number of VM instances to create.\r\n\r\n##### `display=False`\r\nIf True, the VM will create a Chip-Gr8 display. Cannot be True if instances does not equal 1.\r\n\r\n##### `smooth=False`\r\nIf True, enables the experimental smooth rendering mode. This mode is slow on most machines.\r\n\r\n##### `startPaused=False`\r\nIf True, the VM instance will start paused.\r\n\r\n##### `aiInputMask=0xFFFF`\r\nThe keys usable to the AI agent as a bitmask. The keys available to the user are the bitwise inverse of this mask.\r\n\r\n##### `foreground=(255, 255, 255)`\r\nThe foreground color of the Chip-Gr8 display as an RGB tuple or hex code.\r\n\r\n##### `background=(0, 0, 0)`\r\nThe background color of the Chip-Gr8 display as an RGB tuple or hex code.\r\n\r\n##### `theme=None`\r\nThe foreground/background color provided as a tuple.\r\n\r\n##### `autoScroll=True`\r\nIf True, this disassembly source will automatically scroll when the Chip-Gr8 display is open and a ROM is running.\r\n\r\n##### `speed`\r\nThe speed at which the UI is tied to the CHIP-8 frequency. When speed is 1, games will appear to run at the provided frequency, but when speed is 2, games will appear to run twice as fast. Must be provided as an integer.\r\n\r\n### `readableInputHistory(inputHistory, names)`\r\nGiven an `inputHistory` and a set of actions, `names`, as a `NamedList`, produces a human readable version of the `inputHistory`.\r\n\r\n## Chip8VM (Class)\r\nRepresents a CHIP-8 virtual machine. Provides interface and controls for display and input. Rather than initializing directly, an instance of this class or its sister class `Chip8VMs` should always be instantiated using `init`.\r\n\r\n#### `.aiInputMask`\r\nA number that controls what keys are usable by AI agents calling `act` and what keys are usable by a user on their keyboard. For example, an `aiInputMask` of 0x0000 will prevent an AI agent from using any keys, but a user will be able to use all keys.\r\n\r\n#### `.inputHistory`\r\nA list of number pairs that represent changes in key presses. The first value in the pair is the key value, the second is the clock value when input changed to that value.\r\n\r\n#### `.paused`\r\nA control flag set to True if the display is paused.\r\n\r\n#### `.pyclock`\r\nThe pygame clock used to keep track of time between steps when using the Chip-Gr8 display.\r\n\r\n#### `.record`\r\nA control flag set to True if `inputHistory` is being recorded.\r\n\r\n#### `.ROM`\r\nThe path to the currently loaded game ROM.\r\n\r\n#### `.sampleRate`\r\nThe number of steps that are performed when an AI calls `act`.\r\n\r\n#### `.smooth`\r\nA control flag for the experimental smooth rendering mode. This mode is slow on most machines.\r\n\r\n#### `.VM`\r\nA direct reference to the CHIP-8 C-struct. This provides direct memory access (eg. `VM.RAM[0x200]`) as well as register reference (eg. `VM.PC`). Use these fields with caution as inappropriate usage can result in a segmentation fault. Direct references to `VM` should not be maintained (no aliasing).\r\n\r\n#### `.addBreakpoint(addr)`\r\nAdd a breakpoint at `addr`. When the VM steps to this address (when PC is equal to `addr`) the Chip-Gr8 display will automatically pause.\r\n\r\n#### `.removeBreakpoint(addr)`\r\nRemove a breakpoint at `addr`.\r\n\r\n#### `.toggleBreakpoint(addr)`\r\nToggles a breakpoint at `addr`.\r\n\r\n#### `.clearBreakpoints()`\r\nClear all current breakpoints.\r\n\r\n#### `.act(action)`\r\nAllows an AI agent to perform `action` (action is an input key value) and steps the CHIP-8 emulator forward `sampleRate` clock cycles.\r\n\r\n#### `.ctx()`\r\nReturns an instance of the CHIP-8’s VRAM in a NumPy compliant format (Lazyarray). Pixel values can be addressed directly. (eg. a pixel at position (16, 8) can be retrieved with `ctx()[16, 8]`). This method is safe to call repeatedly.\r\n\r\n#### `.done()`\r\nReturns True if the VM is done and has NOT been reset.\r\n\r\n#### `.doneIf(done)`\r\nSignals to the VM that it is done.\r\n\r\n#### `.go()`\r\nStarts the VM in an until `done()` loop, calling `act(0)` repeatedly. This is ideal for user interaction without an AI agent.\r\n\r\n#### `.input(keys)`\r\nSend an input key value to the CHIP-8 emulator. Input keys are masked by `aiInputMask`.\r\n\r\n#### `.loadROM(nameOrPath, reset=True)`\r\nLoads a ROM from the provided path or searches for the name in the set of provided ROM files. If `reset` is True then VM will be reset prior to loading the ROM.\r\n\r\n#### `.loadState(path=None, tag=None)`\r\nLoad a CHIP-8 emulator state from a `path` or by associated `tag`, restoring a previous state of `VM`.\r\n\r\n#### `.saveState(path=None, tag=None)`\r\nSave the current CHIP-8 emulator state to a `path` or `tag`.\r\n\r\n#### `.reset()`\r\nReset the VM with the current ROM still loaded.\r\n\r\n#### `.step()`\r\nStep the VM forward 1 clock cycle.\r\n\r\n## Chip8VMs (Class)\r\nRepresents a collection of CHIP-8 virtual machines. Provides an interface for dealing with and filtering several virtual machines at the same time. This class is iterable, and will iterate over all vms that are NOT `done()`.\r\n\r\n#### `.done()`\r\nReturns True if all VM instances are done.\r\n\r\n#### `.find(predicate)`\r\nFind a specific VM using a function `predicate` that takes a VM as an argument and returns True or False. Returns the first VM for which the `predicate` was True. Searches done and not done VMs.\r\n\r\n#### `.inParallel(do)`\r\nPerforms a function `do` on all not done VMs in parallel. The function is expected to take the VM as an argument. When using this method external vm references can become out of date due to pickling across processes.\r\n\r\n#### `.maxBy(projection)`\r\nReturns the VM with the maximum value by the given `projection`, a function that takes a VM as its argument and returns a comparable value.\r\n\r\n#### `.minBy(projection)`\r\nReturns the VM with the minimum value by the given `projection`, a function that takes a VM as its argument and returns a comparable value.\r\n\r\n#### `.reset()`\r\nResets all the VMs.\r\n\r\n## Game (Class)\r\nA generic class for game specific data. Game specific instances of this class exist for each included ROM (Cave, Pong, Worm, etc.).\r\n\r\n#### `.actions`\r\nA list of valid actions (key values) for the given game.\r\n\r\n#### `.ROM`\r\nThe name of the ROM file for this game.\r\n\r\n#### `.observe(vm)`\r\nReturns a set of game specific observations given a VM.\r\n\r\n## NamedList (Class)\r\nA list-like structure that allows elements to be accessed by named properties. Behaves like a Python list, can be iterated, indexed, spliced, and measured with `len()`.\r\n\r\n#### `.names`\r\nA list of keys for the list in order.\r\n\r\n#### `.values`\r\nA list of values for the list in order.\r\n\r\n#### `.append(name, value)`\r\nAppend a `name` and `value` to the list.\r\n\r\n#### `.nparray()`\r\nRetrieve the values of the list as a NumPy ndarray.\r\n\r\n#### `.tensor()`\r\nRetrieve the values of the list as a TensorFlow tensor.\r\n\r\n## Observer (Class)\r\nRepresents a collection of queries that can be applied to a VM acquiring a set of observations.\r\n\r\n#### `.addQuery(name, query)`\r\nAdd a query with an associated name to an observer. Accepts either a finalized query or a function that accepts a set of observations `(NamedList)` as the first argument and a vm instance as its second argument. This function argument can be used to create compound queries.\r\n\r\n#### `.observe(vm)`\r\nRetrieve a set of observations as a `NamedList` given a `vm` instance.\r\n\r\n## Query (Class)\r\nUsed to find a specific memory address. When using a query to search for a memory address, several predicates can be used to filter the query.\r\n\r\n#### `.done`\r\nTrue if the query has found 0 or 1 addresses.\r\n\r\n#### `.success`\r\nTrue if the query has found 1 address.\r\n\r\n#### `.dec()`\r\nFilter queried memory addresses by values that have decreased since the last query.\r\n\r\n#### `.eq(value)`\r\nFilter queried memory addresses by values that equal `value`.\r\n\r\n#### `.gt(value)`\r\nFilter queried memory addresses by values that are greater than `value`.\r\n\r\n#### `.gte(value)`\r\nFilter queried memory addresses by values that are greater than or equal to `value`.\r\n\r\n#### `.inc()`\r\nFilter queried memory addresses by values that have increased since the last query.\r\n\r\n#### `.lt(value)`\r\nFilter queried memory addresses by values that are less than `value`.\r\n\r\n#### `.lte(value)`\r\nFilter queried memory addresses by values that are less than or equal to `value`.\r\n\r\n#### `.observe(vm)`\r\nIf a query is finished this method returns the value at the VM instance's RAM corresponding to this query, otherwise it raises an Excception.\r\n\r\n#### `.unknown()`\r\nRefresh the previous values of all currently queried memory addresses.",
    plainTxt: 'Overview\nChip-Gr8 is distributed through pip! To install run\nreadonly-nolines\npip install chipgr8\nCurrently Chip-Gr8 only supports python 3.6 and 3.7. We provide binaries for Chip-Gr8&#39;s backend for Windows users with the following configurations: Python36 (32 and 64 bit) and Python37 (32 and 64 bit). For Mac and Linux users pip install should build the backend binaries using your system&#39;s compiler.\nFor additional documentation see the Chip-Gr8 Reference Manual.\nWriting Your First Agent\nThis example will help you write your first AI agent. An AI agent performs two key tasks, observations and actions. To get started import the Chip-Gr8 API, and a game object. The game objects provide useful defaults for observations, actions, as well as the correct ROM name. For this example we will use the game Squash. Squash is a single player Pong. We will also import random for later.\nlang:python-readonly\nimport random\nimport chipgr8\nfrom chipgr8.games import Squash\nAI agents are trained and run in loops. This is typically done with a while loop where you wait for a CHIP-8 VM instance to be done. For our first agent let&#39;s just pick a random action. In order to run this agent we will need to create a VM instance to run it on and load the Squash ROM.\nlang:python-readonly\nvm = chipgr8.init(ROM=Squash.ROM)\nBy default the API returns a VM appropriate for running a single AI. We will now create a loop where we repeatedly choose a random action. Squash.actions provides a list of all the valid Squash game actions. We also need to indicate when the VM instance should be considered done. The Squash object also provides this in its set of observations, so we will observe the VM and check to see if the VM is done.\nlang:python-readonly\nwhile not vm.done():\n    vm.act(random.choice(Squash.actions))\n    observations = Squash.observe(vm)\n    vm.doneIf(observations.done)\nOur AI will now run, but we will not be able to see it perform any of its actions. We can watch a replay using the .inputHistory of our VM. The .go() method will loop the VM instance for us.\nlang:python-readonly\nvms = chipgr8.init(ROM=Squash.ROM, instances=100)\nWe can now iterate over the vms and run each one like we did before.\nlang:python-readonly\nchipgr8.init(\n    ROM=Squash.ROM,\n    inputHistory=vm.inputHistory,\n    display=True\n).go()\nOur AI is not very good, but we can easily make it better just by running multiple random AI agents and picking the best one. Let’s start by creating 100 VM instances.\nlang:python-readonly\nwhile not vms.done():\n    for vm in vms:\n        vm.act(random.choice(Squash.actions))\n        observations = Squash.observe(vm)\n        vm.doneIf(observations.done)\nThis approach is a little slow though since we have to run every VM instance as part of the same process. We can take advantage of a machine&#39;s multiple cores by using the VMs .inParallel() method. This method requires us to refactor our code a little bit. This method expects a function which will be called repeatedly until the vm instance is done. We can do this by taking our inner section of the loop and turning it into a function.\n```lang:python-readonly\ndef action(vm):\n    vm.act(random.choice(Squash.actions))\n    observations = Squash.observe(vm)\n    vm.doneIf(observations.done)\nvms.inParallel(action)\n```\nWe can now just pick the best vm of the bunch. The Squash object thankfully has another observation that can help us: score. We can use the VMs .maxBy() function to get the best VM.\nlang:python-readonly\nbest = vms.maxBy(lambda vm : Squash.observe(vm).score)\nWe can now watch this VM like we did before using its inputHistory. Congratulations on writing your first Chip-Gr8 AI agent! You can find the final code altogether below.\n```lang:python-readonly\nimport random\nimport chipgr8\nfrom chipgr8.games import Squash\nThis action is performed repeatedly until the VM is done\ndef action(vm):\n    vm.act(random.choice(Squash.actions))\n    observations = Squash.observe(vm)\n    vm.doneIf(observations.done)\nCreate 100 CHIP-8 VM instances\nvms = chipgr8.init(ROM=Squash.ROM, instances=100)\nRun all our random agents\nvms.inParallel(action)\nPick the best one\nbest = vms.maxBy(lambda vm : Squash.observe(vm).score)\nShow a replay of the best\nchipgr8.init(\n    ROM=Squash.ROM,\n    inputHistory=best.inputHistory,\n    display=True\n).go()\n```\nQuerying Memory\nIn order to support more games, or find additional values from CHIP-8 RAM for games already included with Chip-Gr8, components are provided for querying memory. These components are meant to be used in a workflow like the following:\nStart the Chip-Gr8 display with the ROM you want to query.\nPut the VM into a state you understand.\nCreate a Query object and use a predicate to limit the number of matching memory addresses.\nChange the VM to a new state and use a new predicate to further filter the results.\nRepeat step 4 until there is only a single address that matches.\nCopy the Query out to a file.\n\nSeveral steps are made easier by the fact that Query and Observer objects will print their own source code in the REPL. You can easily write these to a file using the write function.\nQueries\nQueries provide several predicates to limit matched memory addresses, like .eq(), .dec(), .lte(), etc. A list of all memory addresses, along with their previously queried values can be found using the .previous field. For example:\nlang:python-readonly\nq = Query(vm)\nq.eq(0x04)\nprint(q.previous)\nYou can instantiate a finished Query by providing an address instead of a VM instance. For example, to create a query that looks at address 0x200:\nlang:python-readonly\nq = Query(0x200)\nThis Query can now be used to retrieve the value in CHIP-8 RAM at 0x200 of any VM instance with:\nlang:python-readonly\nq.observe(vm)\nObservers\nQueries can be combined using an Observer. An Observer is just a collection of queries and functions that provides one method, observe, which applies all these queries and functions to a provided VM instance and returns the result as a NamedList. A NamedList is a data structure that behaves like a Python list, but can be accessed by attributes and keys. For example, to create a list of one element, y, with a key, key\n```lang:python-readonly\nmyNamedList = NamedList([&#39;key&#39;], [7])\nTo access the element you can use the following ways:\nmyNameList[0]     # By index\nmyNameList.key    # By attribute\nmyNameList[&#39;key&#39;] # By key\n```\nTo add queries to an Observer you can call .addQuery(). This method also accepts as the query a function that takes two arguments. The first argument is a collection of all non-function observations. The second is the VM instance. This allows you to create combinational queries. For example\nlang:python-readonly\no = Observer()\no.addQuery(&#39;lives&#39;, Query(0x115))\no.addQuery(&#39;done&#39;,  lambda o, vm : o.lives == 0)\nGames\nGames provide actions, observations, and a ROM all in one package. Several games are provided out of the box, but you can also create your own game objects for ROMs not included with Chip-Gr8.\nAPI Reference\nConstants\ndefaultBindings\nDefault key bindings for the Chip-Gr8 display as a Python dictionary.\nthemes\nA Python dictionary of the builtin Chip-Gr8 themes.\nFunctions\nassemble(source=None, inPath=None, outPath=None)\nConverts assembly source code, or source code contained in inPath into binary data (a ROM). This ROM may optionally be written to file with the outPath argument.\ndisassemble((Parameters))\nConverts a binary ROM into an assembly source file. Returns the source. Provides option for disassembling with labels and special format.\nParameters\nbuffer=None\nThe binary ROM to disassemble as a set of bytes. Optional if inPath is provided.\ninPath=None\nThe path to a binary ROM to disassemble. Optional if buffer is provided.\noutPath=None\nIf the path is provided, the source code is written to that file.\nlabels={}\nA dictionary used to generate labels. If None is passed, labels will not be generated in the source.\ndecargs=True\nIf True, instruction numerical operands will be output in decimal rather than hexadecimal.\nsrcFormat=&#39;{label}{labelSep}{prefix}{instruction}\\n&#39;\nA format string for lines of source code. Can contain the following variables label, labelSep, prefix, instruction, addr, and dump. For example for hexdump with address use:\nlang:python-readonly\nsrcFormat=&#39;{addr} {dump}&#39;\nlabelSep = &#39;\\n  &#39;\nThe string used to separate labels from instructions.\nprefix=&#39; &#39;\nThe string used to prefix all instructions.\naddrTable={}\nA table that will have addresses as keys and instructions as values.\nfindROM(rom)\nReturns the path to rom if it is one of the included ROMs.\nhexdump(buffer=None, inPath=None, outPath=None)\nDumps a buffer or file at inPath as a set of 16-bit hexadecimal values on each line (the number of bits that correspond to a CHIP-8 instruction). Writes the data to outPath if provided.\ninit((Parameters))\nReturns an instance of Chip8VM or Chip8VMs. Used to configure the virtual machines for a user or a given AI agent.\nParameters\nROM=None\nIf provided will load a ROM into the VM instance or instances.\nfrequency=600\nThe starting frequency of the VM instance or instances. Will automatically be set to the closest multiple of 60 less than or equal to the provided frequency.\nloadState=None\nA path or tag to a VM save state that will be loaded into each VM instance or instances.\ninputHistory=None\nIf provided user and AI input will be ignored and the history will be used to reproduce the same events.\nsampleRate=1\nThe number of steps that are performed when an AI calls act.\ninstances=1\nThe number of VM instances to create.\ndisplay=False\nIf True, the VM will create a Chip-Gr8 display. Cannot be True if instances does not equal 1.\nsmooth=False\nIf True, enables the experimental smooth rendering mode. This mode is slow on most machines.\nstartPaused=False\nIf True, the VM instance will start paused.\naiInputMask=0xFFFF\nThe keys usable to the AI agent as a bitmask. The keys available to the user are the bitwise inverse of this mask.\nforeground=(255, 255, 255)\nThe foreground color of the Chip-Gr8 display as an RGB tuple or hex code.\nbackground=(0, 0, 0)\nThe background color of the Chip-Gr8 display as an RGB tuple or hex code.\ntheme=None\nThe foreground/background color provided as a tuple.\nautoScroll=True\nIf True, this disassembly source will automatically scroll when the Chip-Gr8 display is open and a ROM is running.\nspeed\nThe speed at which the UI is tied to the CHIP-8 frequency. When speed is 1, games will appear to run at the provided frequency, but when speed is 2, games will appear to run twice as fast. Must be provided as an integer.\nreadableInputHistory(inputHistory, names)\nGiven an inputHistory and a set of actions, names, as a NamedList, produces a human readable version of the inputHistory.\nChip8VM (Class)\nRepresents a CHIP-8 virtual machine. Provides interface and controls for display and input. Rather than initializing directly, an instance of this class or its sister class Chip8VMs should always be instantiated using init.\n.aiInputMask\nA number that controls what keys are usable by AI agents calling act and what keys are usable by a user on their keyboard. For example, an aiInputMask of 0x0000 will prevent an AI agent from using any keys, but a user will be able to use all keys.\n.inputHistory\nA list of number pairs that represent changes in key presses. The first value in the pair is the key value, the second is the clock value when input changed to that value.\n.paused\nA control flag set to True if the display is paused.\n.pyclock\nThe pygame clock used to keep track of time between steps when using the Chip-Gr8 display.\n.record\nA control flag set to True if inputHistory is being recorded.\n.ROM\nThe path to the currently loaded game ROM.\n.sampleRate\nThe number of steps that are performed when an AI calls act.\n.smooth\nA control flag for the experimental smooth rendering mode. This mode is slow on most machines.\n.VM\nA direct reference to the CHIP-8 C-struct. This provides direct memory access (eg. VM.RAM[0x200]) as well as register reference (eg. VM.PC). Use these fields with caution as inappropriate usage can result in a segmentation fault. Direct references to VM should not be maintained (no aliasing).\n.addBreakpoint(addr)\nAdd a breakpoint at addr. When the VM steps to this address (when PC is equal to addr) the Chip-Gr8 display will automatically pause.\n.removeBreakpoint(addr)\nRemove a breakpoint at addr.\n.toggleBreakpoint(addr)\nToggles a breakpoint at addr.\n.clearBreakpoints()\nClear all current breakpoints.\n.act(action)\nAllows an AI agent to perform action (action is an input key value) and steps the CHIP-8 emulator forward sampleRate clock cycles.\n.ctx()\nReturns an instance of the CHIP-8’s VRAM in a NumPy compliant format (Lazyarray). Pixel values can be addressed directly. (eg. a pixel at position (16, 8) can be retrieved with ctx()[16, 8]). This method is safe to call repeatedly.\n.done()\nReturns True if the VM is done and has NOT been reset.\n.doneIf(done)\nSignals to the VM that it is done.\n.go()\nStarts the VM in an until done() loop, calling act(0) repeatedly. This is ideal for user interaction without an AI agent.\n.input(keys)\nSend an input key value to the CHIP-8 emulator. Input keys are masked by aiInputMask.\n.loadROM(nameOrPath, reset=True)\nLoads a ROM from the provided path or searches for the name in the set of provided ROM files. If reset is True then VM will be reset prior to loading the ROM.\n.loadState(path=None, tag=None)\nLoad a CHIP-8 emulator state from a path or by associated tag, restoring a previous state of VM.\n.saveState(path=None, tag=None)\nSave the current CHIP-8 emulator state to a path or tag.\n.reset()\nReset the VM with the current ROM still loaded.\n.step()\nStep the VM forward 1 clock cycle.\nChip8VMs (Class)\nRepresents a collection of CHIP-8 virtual machines. Provides an interface for dealing with and filtering several virtual machines at the same time. This class is iterable, and will iterate over all vms that are NOT done().\n.done()\nReturns True if all VM instances are done.\n.find(predicate)\nFind a specific VM using a function predicate that takes a VM as an argument and returns True or False. Returns the first VM for which the predicate was True. Searches done and not done VMs.\n.inParallel(do)\nPerforms a function do on all not done VMs in parallel. The function is expected to take the VM as an argument. When using this method external vm references can become out of date due to pickling across processes.\n.maxBy(projection)\nReturns the VM with the maximum value by the given projection, a function that takes a VM as its argument and returns a comparable value.\n.minBy(projection)\nReturns the VM with the minimum value by the given projection, a function that takes a VM as its argument and returns a comparable value.\n.reset()\nResets all the VMs.\nGame (Class)\nA generic class for game specific data. Game specific instances of this class exist for each included ROM (Cave, Pong, Worm, etc.).\n.actions\nA list of valid actions (key values) for the given game.\n.ROM\nThe name of the ROM file for this game.\n.observe(vm)\nReturns a set of game specific observations given a VM.\nNamedList (Class)\nA list-like structure that allows elements to be accessed by named properties. Behaves like a Python list, can be iterated, indexed, spliced, and measured with len().\n.names\nA list of keys for the list in order.\n.values\nA list of values for the list in order.\n.append(name, value)\nAppend a name and value to the list.\n.nparray()\nRetrieve the values of the list as a NumPy ndarray.\n.tensor()\nRetrieve the values of the list as a TensorFlow tensor.\nObserver (Class)\nRepresents a collection of queries that can be applied to a VM acquiring a set of observations.\n.addQuery(name, query)\nAdd a query with an associated name to an observer. Accepts either a finalized query or a function that accepts a set of observations (NamedList) as the first argument and a vm instance as its second argument. This function argument can be used to create compound queries.\n.observe(vm)\nRetrieve a set of observations as a NamedList given a vm instance.\nQuery (Class)\nUsed to find a specific memory address. When using a query to search for a memory address, several predicates can be used to filter the query.\n.done\nTrue if the query has found 0 or 1 addresses.\n.success\nTrue if the query has found 1 address.\n.dec()\nFilter queried memory addresses by values that have decreased since the last query.\n.eq(value)\nFilter queried memory addresses by values that equal value.\n.gt(value)\nFilter queried memory addresses by values that are greater than value.\n.gte(value)\nFilter queried memory addresses by values that are greater than or equal to value.\n.inc()\nFilter queried memory addresses by values that have increased since the last query.\n.lt(value)\nFilter queried memory addresses by values that are less than value.\n.lte(value)\nFilter queried memory addresses by values that are less than or equal to value.\n.observe(vm)\nIf a query is finished this method returns the value at the VM instance&#39;s RAM corresponding to this query, otherwise it raises an Excception.\n.unknown()\nRefresh the previous values of all currently queried memory addresses.\n',
    route: '\\docs',
    layout: '../layouts/API',
    title: 'chip-gr8 | Docs',
    place: 'api'
  }),
  'index': new _Page__WEBPACK_IMPORTED_MODULE_0__["default"]({
    name: 'index',
    content: "Chip-Gr8 is a sandbox for creating artificial intelligence agents for retro video games like Pong, Breakout, and Space Invaders \\[1\\]. Chip-Gr8 lets you interactively program AI agents, easily record their behaviour, collect data, pause and play their actions, and even play against them! If you have never programmed an AI before, Chip-Gr8 is a great place to start!\r\n\r\n# Installing\r\n\r\nChip-Gr8 is a Python package. Use pip to install it!\r\n\r\n```readonly-nolines\r\npip install chipgr8\r\n```\r\n\r\n# Getting Started\r\n\r\nIf you want to play a game using Chip-Gr8, all you have to do is start it on the command line! For example, to play Breakout you would run\r\n\r\n```readonly-nolines\r\npython -m chipgr8 -r breakout\r\n```\r\n\r\nYou will be greeted by the Chip-Gr8 display and can start playing!\r\n\r\n![Alt Text](./static/img/breakout.gif)\r\n\r\nCreating an AI agent is just as straightforward, just drop the following code into your favorite text editor and you are ready to go!\r\n\r\n```lang:python-readonly\r\nimport chipgr8\r\nfrom chipgr8.games import Breakout\r\n\r\nvm = chipgr8.init(display=True, ROM=Breakout.ROM)\r\nwhile not vm.done():\r\n    vm.act(Breakout.actions.left)\r\n```\r\n\r\nTo find out more about Chip-Gr8, its API, included games, and more examples, download the [Reference Manual](./static/Chip-Gr8-Reference-Manual.pdf), or head over to the [docs](./docs)!\r\n\r\n## Themes\r\nThe Chip-Gr8 UI harkens back to the retro games it houses, but modern conveniences are not all gone. You can play and watch your AI agent play in style with customizable themes, here are some of our favorites!\r\n\r\n![ThemeGrid](./static/img/themes/Grid.png)\r\n\r\n# The Project\r\nChip-Gr8 is the capstone project for six Engineering students at the University of Victoria. Chip-Gr8's goal is to provide a high performance CHIP-8 emulator and a user friendly Python API that seamlessly integrates with modern machine learning and AI libraries. Inspiration for the Chip-Gr8 project came from similar emulation + AI combinations of the [SNES](https://www.youtube.com/watch?v=qv6UVOQ0F44) \\[2\\] and [Atari](https://arxiv.org/pdf/1312.5602v1.pdf) \\[3\\] systems.\r\n\r\n## What is Chip-Gr8?\r\nAt its core, Chip-Gr8 is an emulator of the CHIP-8 system. Developed in the 1970's by [Joseph Weisbecker](https://en.wikipedia.org/wiki/Joseph_Weisbecker#Small_systems) \\[4\\], CHIP-8 was meant to be a simple system that programmers could use for beginner video game development. Many simple games, including Pong, Space Invaders, and Breakout, were programmed for the CHIP-8 throughout the 70s and 80s.\r\n\r\nWhat seperates Chip-Gr8 from similar CHIP-8 emulation projects is its focus on enabling AI agents. Chip-Gr8 provides pre-built memory maps that translate the CHIP-8's 4K RAM into relevant game data like player position, lives, and game time. Included with this data are the tools used to gather it, meaning new features can easily be added using a similar querying model used by popular gaming memory tools like [Cheat Engine](https://www.cheatengine.org/) \\[5\\]. The CHIP-8 emulator itself is implemented in C and designed to be run in parallel, making it easy to train many AI agents at once.\r\n\r\nChip-Gr8 aims to scale with a user's development goals, from procedural AIs that follow the ball in pong, to a decision tree that makes a decision based off environmental features, to a neural network trained on the pixel buffer of games.\r\n\r\n## Technology Stack\r\nThe Chip-Gr8 API is written in Python to ensure that it can interact with the best open source AI libraries available, like [scikit-learn](https://scikit-learn.org/stable/) \\[6\\], [PyTorch](https://pytorch.org/) \\[7\\], and [TensorFlow](https://www.tensorflow.org/) library \\[8\\]. Chip-Gr8 is built enitrely on top of open source software. Chip-Gr8 depends on\r\n\r\n- [NumPy](https://numpy.org/) for presenting numeric data \\[9\\],\r\n- [pygame](https://www.pygame.org/news) for rendering a cross platform display \\[10\\],\r\n- and [Lazyarray](https://lazyarray.readthedocs.io/en/latest/) for sparse data accesses \\[11\\].\r\n\r\n# Project Timeline\r\n\r\nPrimary development of Chip-Gr8 occurred over the Summer of 2019, the timeline below outlines Chip-Gr8's progress.\r\n",
    plainTxt: 'Chip-Gr8 is a sandbox for creating artificial intelligence agents for retro video games like Pong, Breakout, and Space Invaders [1]. Chip-Gr8 lets you interactively program AI agents, easily record their behaviour, collect data, pause and play their actions, and even play against them! If you have never programmed an AI before, Chip-Gr8 is a great place to start!\nInstalling\nChip-Gr8 is a Python package. Use pip to install it!\nreadonly-nolines\npip install chipgr8\nGetting Started\nIf you want to play a game using Chip-Gr8, all you have to do is start it on the command line! For example, to play Breakout you would run\nreadonly-nolines\npython -m chipgr8 -r breakout\nYou will be greeted by the Chip-Gr8 display and can start playing!\nAlt Text\nCreating an AI agent is just as straightforward, just drop the following code into your favorite text editor and you are ready to go!\n```lang:python-readonly\nimport chipgr8\nfrom chipgr8.games import Breakout\nvm = chipgr8.init(display=True, ROM=Breakout.ROM)\nwhile not vm.done():\n    vm.act(Breakout.actions.left)\n```\nTo find out more about Chip-Gr8, its API, included games, and more examples, download the Reference Manual, or head over to the docs!\nThemes\nThe Chip-Gr8 UI harkens back to the retro games it houses, but modern conveniences are not all gone. You can play and watch your AI agent play in style with customizable themes, here are some of our favorites!\nThemeGrid\nThe Project\nChip-Gr8 is the capstone project for six Engineering students at the University of Victoria. Chip-Gr8&#39;s goal is to provide a high performance CHIP-8 emulator and a user friendly Python API that seamlessly integrates with modern machine learning and AI libraries. Inspiration for the Chip-Gr8 project came from similar emulation + AI combinations of the SNES [2] and Atari [3] systems.\nWhat is Chip-Gr8?\nAt its core, Chip-Gr8 is an emulator of the CHIP-8 system. Developed in the 1970&#39;s by Joseph Weisbecker [4], CHIP-8 was meant to be a simple system that programmers could use for beginner video game development. Many simple games, including Pong, Space Invaders, and Breakout, were programmed for the CHIP-8 throughout the 70s and 80s.\nWhat seperates Chip-Gr8 from similar CHIP-8 emulation projects is its focus on enabling AI agents. Chip-Gr8 provides pre-built memory maps that translate the CHIP-8&#39;s 4K RAM into relevant game data like player position, lives, and game time. Included with this data are the tools used to gather it, meaning new features can easily be added using a similar querying model used by popular gaming memory tools like Cheat Engine [5]. The CHIP-8 emulator itself is implemented in C and designed to be run in parallel, making it easy to train many AI agents at once.\nChip-Gr8 aims to scale with a user&#39;s development goals, from procedural AIs that follow the ball in pong, to a decision tree that makes a decision based off environmental features, to a neural network trained on the pixel buffer of games.\nTechnology Stack\nThe Chip-Gr8 API is written in Python to ensure that it can interact with the best open source AI libraries available, like scikit-learn [6], PyTorch [7], and TensorFlow library [8]. Chip-Gr8 is built enitrely on top of open source software. Chip-Gr8 depends on\nNumPy for presenting numeric data [9],\npygame for rendering a cross platform display [10],\nand Lazyarray for sparse data accesses [11].\n\nProject Timeline\nPrimary development of Chip-Gr8 occurred over the Summer of 2019, the timeline below outlines Chip-Gr8&#39;s progress.\n',
    route: '/index',
    layout: '../layouts/Docs',
    title: 'chip-gr8',
    subtitle: 'Chip-Gr8 – Emulation for AI',
    place: 'home',
    version: 'v0.1.1',
    timeline: [{
      title: 'Early May',
      content: "Started brainstorming ideas for the University of Victoria's SENG 499 course project."
    }, {
      title: 'Mid May',
      content: 'Idea to develop a CHIP-8 emulator with AI teaching capabilities solidified; documentation is started. Project is named "Chip-Gr8" (pronounced Chip-Great).'
    }, {
      title: 'Late May',
      content: 'Design documentation is filled out via team discussions. Prototyping work begins.'
    }, {
      title: 'Early June',
      content: 'Python wrapper and C-based emulator programming begins. Work is focused on the C-based emulator and the CTypes integration.'
    }, {
      title: 'Mid June',
      content: 'Visualization is completed; CHIP-8 ROMs can be visualized with no input. Emulator bugs are fixed en masse to ensure it runs on Windows, Mac, and Linux.'
    }, {
      title: 'Late June',
      content: 'C-based emulator is completed. Python integration is completed. Support for keyboard input is operational. Memory visualization milestone is started. More bugs are squashed.'
    }, {
      title: 'Early July',
      content: 'Development on AI tools has begun; these will be used when developing example AIs. Memory visualization is working minimally, progress still being made and bugs being fixed.'
    }, {
      title: 'Mid July',
      content: 'Memory visualization module is completed. AI tools have been completed. Development on example AIs begins.'
    }, {
      title: 'Late July',
      content: 'Example AIs are worked on to provide demonstration-worthy agents. UI upgrades are implemented. Bugs are found and squashed.'
    }],
    bibliography: ['Den of Geek. (2011). The story of Breakout. \\[online\\] Available at: https://www.denofgeek.com/us/games/12171/the-story-of-breakout \\[Accessed Jul. 2019\\].', '"MarI/O - Machine Learning for Video Games", *YouTube*, 2019. \\[online\\]. Available: https://www.youtube.com/watch?v=qv6UVOQ0F44. \\[Accessed: 22- Jul- 2019\\]', 'V. Mnih, K. Kavukcuoglu, D. Silver, A. Graves, I. Antonoglou, D. Wierstra and M. Riedmiller, Playing Atari with Deep Reinforcement Learning. *DeepMind Technologies*, 2013.', '"Joseph Weisbecker", *En.wikipedia.org*, 2018. \\[online\\]. Available: https://en.wikipedia.org/wiki/Joseph_Weisbecker#Small_systems. \\[Accessed: 22- Jul- 2019\\]', 'Cheatengine.org. (2019). *Cheat Engine*. \\[online\\] Available at: https://www.cheatengine.org/ \\[Accessed Jul. 2019\\].', 'Scikit-learn.org. (2019). *scikit-learn: machine learning in Python*. \\[online\\] Available at: https://scikit-learn.org \\[Accessed Jul. 2019\\].', 'Pytorch.org. (2019). *PyTorch*. \\[online\\] Available at: https://pytorch.org/ \\[Accessed Jul. 2019\\].', 'TensorFlow. (2019). *TensorFlow*. \\[online\\] Available at: https://www.tensorflow.org/ \\[Accessed Jul. 2019\\].', '"NumPy — NumPy", *Numpy.org*, 2019. \\[online\\]. Available: https://numpy.org/. \\[Accessed: 22- Jul- 2019\\]', '"pygame", *Pygame.org*, 2019. \\[online\\]. Available: https://www.pygame.org/news. \\[Accessed: 22- Jul- 2019\\]', '"lazyarray — lazyarray 0.3.2 documentation", *Lazyarray.readthedocs.io*, 2019. \\[online\\]. Available: https://lazyarray.readthedocs.io/en/latest/. \\[Accessed: 22- Jul- 2019\\]']
  })
});

/***/ })

})
//# sourceMappingURL=docs.js.f4cde23e8e335c225a6e.hot-update.js.map