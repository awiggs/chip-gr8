
// Generated by Page Builder
import Page from './Page';
import _    from 'lodash';

export default {

    $pages() {
        return Object.values(this).filter(page => page instanceof Page);
    },

    $blogs() {
        return this.$pages().filter(page => page.blog).sort(Page.compareDates);
    },

    $search(searchText) {
        const regex   = new RegExp(_.escapeRegExp(_.escape(searchText)), 'i');
        const results = [];
        for (const page of this.$pages()) {
            if (page.$searchRegex(regex)) {
                results.push(page);
            }
        }
        return results;
    },

    'about': new Page({
        name: 'about',
        content: '',
        plainTxt: '',
        route: '/about',
        layout: '../layouts/About',
        title: 'chip-gr8 | About',
        place: 'about',
    }),
    'index': new Page({
        name: 'index',
        content: 'Welcome to Chip-Gr8! This project was the capstone project of six engineering students at the University of Victoria. \nBy combining our passions for gaming and artificial intelligence, we created a CHIP-8 emulator that doubles as a tool for learning how to develop Python AI programs. The aim of this project was to give new generations of programmers a stepping stone application into the world of AI.\n',
        plainTxt: 'Welcome to Chip-Gr8! This project was the capstone project of six engineering students at the University of Victoria. \nBy combining our passions for gaming and artificial intelligence, we created a CHIP-8 emulator that doubles as a tool for learning how to develop Python AI programs. The aim of this project was to give new generations of programmers a stepping stone application into the world of AI.\n',
        route: '/index',
        layout: '../layouts/Docs',
        title: 'chip-gr8',
        subtitle: 'Chip 8 Emulation for AI',
        place: 'home',
    }),
    'project': new Page({
        name: 'project',
        content: "# The Project\nThe aim of this project was to design a high performance emulation engine with a Python API for integration with modern machine learning and AI libraries. Inspiration for the Chip-Gr8 project came from similar emulation + AI combinations of the NES and Atari systems.\n\n## What is Chip-Gr8?\nAt its core, Chip-Gr8 is an emulator of the CHIP-8 system. Developed in the 1970's by Joseph Weisbecker, CHIP-8 was meant to be a simple system that programmers could use for beginner video game development. Many simple games, including Pong, Space Invaders, and Breakout, were programmed for the CHIP-8 throughout the 70s and 80s.\n\nThe key feature of Chip-Gr8 is the artificial intelligence (AI) API that is integrated into the emulator. This is meant to give developers an introductory experience into video game AI development, as well as modern maching learning techniques and useful AI libraries.\n\n## Why Chip-Gr8?\nAs a team, we wanted a project idea that would both test our skills and that other developers would want to use. Furthermore, since none of us were particularly adept in the field of writing AI agents, we wanted to create a tool that we would have found useful had we been searching for a way to get into AI programming. With Chip-Gr8, the idea is that by providing a simplified Python API into the core of a CHIP-8 emulator, a basic programmer can pick up our tool and create their first Space Invaders, or other supported video game, AI! \n\nWe hoped that by developing not just a marketable product, but an educational tool, that we could excite people into learning the basics of the world of artificial intelligence programming.\n\n## Technologies Used\nThe Chip-Gr8 project was written in C and Python. C was used for the core CHIP-8 emulator opreations and memory management. Python was integrated closely with C using a library called CTypes. Python was used to handle the primary virtual machine structure, load/unload ROMs, as well as handling any I/O and visual display. Additional libraries used in Python were:\n- NumPy\n- PyGame\n- Lazyarray\n\n< More technical talk here >\n\n# Project Timeline",
        plainTxt: 'The Project\nThe aim of this project was to design a high performance emulation engine with a Python API for integration with modern machine learning and AI libraries. Inspiration for the Chip-Gr8 project came from similar emulation + AI combinations of the NES and Atari systems.\nWhat is Chip-Gr8?\nAt its core, Chip-Gr8 is an emulator of the CHIP-8 system. Developed in the 1970&#39;s by Joseph Weisbecker, CHIP-8 was meant to be a simple system that programmers could use for beginner video game development. Many simple games, including Pong, Space Invaders, and Breakout, were programmed for the CHIP-8 throughout the 70s and 80s.\nThe key feature of Chip-Gr8 is the artificial intelligence (AI) API that is integrated into the emulator. This is meant to give developers an introductory experience into video game AI development, as well as modern maching learning techniques and useful AI libraries.\nWhy Chip-Gr8?\nAs a team, we wanted a project idea that would both test our skills and that other developers would want to use. Furthermore, since none of us were particularly adept in the field of writing AI agents, we wanted to create a tool that we would have found useful had we been searching for a way to get into AI programming. With Chip-Gr8, the idea is that by providing a simplified Python API into the core of a CHIP-8 emulator, a basic programmer can pick up our tool and create their first Space Invaders, or other supported video game, AI! \nWe hoped that by developing not just a marketable product, but an educational tool, that we could excite people into learning the basics of the world of artificial intelligence programming.\nTechnologies Used\nThe Chip-Gr8 project was written in C and Python. C was used for the core CHIP-8 emulator opreations and memory management. Python was integrated closely with C using a library called CTypes. Python was used to handle the primary virtual machine structure, load/unload ROMs, as well as handling any I/O and visual display. Additional libraries used in Python were:\n- NumPy\n- PyGame\n- Lazyarray\n&lt; More technical talk here &gt;\nProject Timeline\n',
        route: '/project',
        layout: '../layouts/Project',
        title: 'chip-gr8 | Project',
        place: 'project',
        timeline: [
            {
                title: 'Early May',
                content: 'Started brainstorming ideas for the course project.',
            },
            {
                title: 'Mid May',
                content: 'Idea to develop a CHIP-8 emulator with AI teaching capabilities solidified; documentation is started. Project is named "Chip-Gr8" (pronounced Chip-Great).',
            },
            {
                title: 'Late May',
                content: 'Design documentation is filled out via team discussions. Prototyping work begins.',
            },
            {
                title: 'Early June',
                content: 'Python wrapper and C-based emulator programming begins. Work is focused on the C-based emulator and the CTypes integration.',
            },
            {
                title: 'Mid June',
                content: 'Visualization is completed; CHIP-8 ROMs can be visualized with no input. Emulator bugs are fixed en masse to ensure it runs in Windows, Mac, and Linux.',
            },
            {
                title: 'Late June',
                content: 'C-based emulator is completed, therefore project milestone 1 is completed. Python integration is completed, therefore project milestone 2 is completed. Support for keyboard input is operational, therefore project milestone 3 is completed ahead of schedule. Memory visualization milestone is started. Final bugs are squashed from previous milestones.',
            },
            {
                title: 'Early July',
                content: 'Development on AI tools has begun; these will be used when developing example AIs. AIs Memory visualization is working minimally, progress still being made and bugs being fixed.',
            },
            {
                title: 'Mid July',
                content: 'Memory visualization module is completed, therefore concluding milestone 4. AI tools have been completed, therefore completing milestone 5. Development on example AIs begins.',
            },
            {
                title: 'Late July',
                content: 'Example AIs are worked on to provide demonstration-worthy agents. UI upgrades are implemented. Final bugs are wrapped up if time permits.',
            },
        ],
    }),

};
