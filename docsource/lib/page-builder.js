const fs       = require('fs');
const path     = require('path');
const glob     = require('glob');
const chokidar = require('chokidar');
const JSON5    = require('json5');
const { tab }  = require('./string-util');
const { markdownToTxt } = require('markdown-to-txt');

const watchGlobs = ['./pages/**/*.md', './pages/**/*.json5'];
const pageGlob   = './pages/**/*.json5';
const meta       = {};

const printWrap = (start, finish, fn) => {
    process.stdout.write(start);
    fn();
    process.stdout.write(finish);
}

const build = (contentPath) => {

    if (!contentPath) { return; }
    
    // In case the JSON file was updated, we start with the md file
    contentPath = contentPath.replace(/\.json5$/, '.md');
    
    // Get file information
    const jsonPath = contentPath.replace(/\.md$/, '.json5');
    const pagePath = contentPath.replace(/\.md$/, '.js');
    const file     = path.parse(contentPath);
    const content  = fs.existsSync(contentPath) 
        ? fs.readFileSync(contentPath, 'utf8') 
        : '';
    
    // Generate page data
    let page = {
        name      : file.name,
        buildDate : this.date,
        content   : content,
        plainTxt  : markdownToTxt(content, { escapeHtml: false }),
        route     : contentPath.replace(/^.*?pages|\.md$/g, ''),
    };
    if (fs.existsSync(jsonPath)) {
        try {
            page = { ...page, ...JSON5.parse(fs.readFileSync(jsonPath, 'utf8') ) };
        } catch(err) {
            process.stdout.write(`\nError parsing ${jsonPath}!\n${err}\n`);
        }
    } else {
        process.stdout.write(`\n${jsonPath} does not exist!\n`);
        return;
    }
    if (page.hide) {
        delete meta[page.name];
        if (fs.existsSync(pagePath)) {
            fs.unlinkSync(pagePath);
        }
    } else {
        meta[page.name] = page;
        fs.writeFileSync(pagePath, generatePage(page));
    }
    // Update meta file
    fs.writeFileSync('./lib/Pages.js', generateMeta(meta));
};

const generatePage = page => `
// Generated by Page Builder
import Layout from '${page.layout}';

export default () =>
    <Layout pageName='${page.name}' />;
`;

const generateMeta = meta => `
// Generated by Page Builder
import Page from './Page';
import _    from 'lodash';

export default {

    $pages() {
        return Object.values(this).filter(page => page instanceof Page);
    },

    $blogs() {
        return this.$pages().filter(page => page.blog).sort(Page.compareDates);
    },

    $search(searchText) {
        const regex   = new RegExp(_.escapeRegExp(_.escape(searchText)), 'i');
        const results = [];
        for (const page of this.$pages()) {
            if (page.$searchRegex(regex)) {
                results.push(page);
            }
        }
        return results;
    },

${Object.keys(meta).map(key =>
`    '${key}': new Page(${tab(JSON5.stringify(meta[key], null, 4), 4)}),`
).join('\n')}

};
`;

printWrap('Performing first time build...', 'done.\n', () => {
    for (const filePath of glob.sync(pageGlob)) {
        build(filePath);
    }
});

chokidar.watch(watchGlobs).on('change', path => {
    printWrap('Rebuilding...', 'done.\n', () => build(path));
});