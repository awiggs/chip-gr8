# THIS IS THE PART YOU MODIFY #

RAM_SIZE   = '0x1000'
VRAM_SIZE  = '(64 * 32)'
STACK_SIZE = '16'

# Define the fields of the VM struct so that we can autogenerate a C struct and
# a python ctypes wrapper *correctly*. Provide a name, type, and description
# (comment) to include in the generated files.
#
# Currently the available types are u8, u16, u32, u64, u8_ptr, u16_ptr, u32_ptr,
# u64_ptr, void_ptr. You can also create an array of any type with 
# array(type, size)

STRUCT_DEFINITION = lambda : [
    # Name     Type                    Description
    ('RAM',    array(u8, RAM_SIZE),    'Main memory'),
    ('VRAM',   array(u8, RAM_SIZE),    'Video memory'),
    ('stack',  array(u16, STACK_SIZE), 'Address stack'),
    ('SP',     u8,                     'Stack pointer'),
    ('PC',     u16,                    'Program counter'),
    ('I',      u16,                    'Address register'),
    ('V',      array(u8, RAM_SIZE),    'General purpose registers'),
    ('DT',     u8,                     'Delay timer'),
    ('ST',     u8,                     'Sound timer'),
    ('keys',   array(u8, '16'),        'Key IO registers'),
    ('clock',  u64,                    'Time since simulation began'),
    ('ROM',    void_ptr,               'ROM file pointer'),
]

# THIS IS THE PART YOU LEAVE ALONE #

import os

PY_PATH = os.path.realpath(os.path.join(__file__, '../chipgr8/autogen_Chip8VMStruct.py'))
C_PATH  = os.path.realpath(os.path.join(__file__, '../includes/autogen_Chip8VMStruct.h'))

# Type Definitions
[u8, u16, u32, u64, u8_ptr, u16_ptr, u32_ptr, u64_ptr, void_ptr] = (
#   python ctype                        C type
    ('ctypes.c_uint8',                  'u8 {}'),
    ('ctypes.c_uint16',                 'u16 {}'),
    ('ctypes.c_uint32',                 'u32 {}'),
    ('ctypes.c_uint64',                 'u64 {}'),
    ('ctypes.POINTER(ctypes.c_uint8)',  'u8* {}'),
    ('ctypes.POINTER(ctypes.c_uint16)', 'u16* {}'),
    ('ctypes.POINTER(ctypes.c_uint32)', 'u32* {}'),
    ('ctypes.POINTER(ctypes.c_uint64)', 'u64* {}'),
    ('ctypes.c_void_p',                 'void* {}'),
)
array  = lambda t, s : ('{} * {}'.format(t[0], s), t[1].format('{}[' + s + ']'))

def defineVMStruct():
    print('Getting definition...')
    definition = STRUCT_DEFINITION()
    print('Writing py struct...'.format(PY_PATH))
    with open(PY_PATH, 'w') as fs:
        fs.write(
'''
# !!! DO NOT MODIFY THIS FILE !!!!
#
# This file was autogenerated `defineVMStruct.py`.
# If you need to modify this struct modify the definition in that file.

import ctypes

class Chip8VMStruct(ctypes.Structure):
    _pack_   = 1
    _fields_ = [
        <fields>
    ]
'''.replace('<fields>', '\n        '.join(['(\'{}\', {}), # {}'.format(name, t0, comment) 
        for (name, (t0, t1), comment) 
        in definition
    ])))
    print('Writing C struct...'.format(C_PATH))
    with open(C_PATH, 'w') as fs:
        fs.write(
'''
#pragma once

/**
 * !!! DO NOT MODIFY THIS FILE !!!
 *
 * This file was autogenerated `defineVMStruct.py`.
 * If you need to modify this struct modify the definition in that file.
 */

#ifndef AUTOGEN_VMSTRUCT_H
#define AUTOGEN_VMSTRUCT_H

/* !!! DO NOT MODIFY !!! */
typedef struct Chip8VM_t Chip8VM_t;
struct Chip8VM_t {
    <fields>
} __attribute__((packed));

#endif /* AUTOGEN_VMSTRUCT_H */
'''.replace('<fields>', '\n    '.join(['{}; // {}'.format(t1.format(name), comment) 
        for (name, (t0, t1), comment) 
        in definition
    ])))
    print('done.')    

if __name__ == '__main__':
    defineVMStruct()